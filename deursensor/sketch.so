#include <ESP8266WiFi.h>
#include <PubSubClient.h> // https://github.com/knolleary/pubsubclient/releases/tag/v2.6 PubSubClient download

const int analogPin = 0;
const char* wifi_ssid = "time";
const char* wifi_password = "deursensor";
const char* mqtt_server = "gostarena.westeurope.cloudapp.azure.com";
const char* observation_topic = "GOST/Datastreams(31)/Observations";

WiFiClient espClient;
PubSubClient client(espClient);

bool initSend = true;
bool doorOpen = true;

void setup() {
  Serial.begin(115200);
  delay(10);

  setup_wifi();
  client.setServer(mqtt_server, 1883);
}

void setup_wifi() {
  delay(10);

  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(wifi_ssid);

  WiFi.begin(wifi_ssid, wifi_password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void reconnect_mqtt() {
   while (!client.connected()) {
      Serial.print("Attempting MQTT connection...");
   if (client.connect("ESP8266Client")) {
      Serial.println("connected");
   } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");

      delay(5000);
    }
  }
}

void loop() {
   if (!client.connected()) {
      reconnect_mqtt();
   }
   client.loop();
    
   int reading = analogRead(analogPin);
   bool newDoorOpen = doorOpen;

   if (reading == 1024 && !doorOpen) {
     newDoorOpen = true;
   } else if (reading < 1024 && doorOpen) {
     newDoorOpen = false;
   }

   if (initSend || newDoorOpen != doorOpen) {
     initSend = false;
     sendObservation(doorOpen);
   }

   doorOpen = newDoorOpen;
   delay(100);
}

void sendObservation(bool isOpen)
{
   if(isOpen){
     client.publish(observation_topic, "{ \"result\": 1 }", false);
   } else {
     client.publish(observation_topic, "{ \"result\": 0 }", false);
   }
}



